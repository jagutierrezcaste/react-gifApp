{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMA6BeA,EAzBK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAWrC,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAdc,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,Y,uBCN/CG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCWLO,EATK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC7B,OACI,yBAAKc,UAAU,+CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCuBDO,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAd,GAEnBe,YAAW,WACPH,EAAS,CAELf,KAAMG,EACNU,SAAS,MAEd,UAER,CAACpB,IAEGqB,EDhBmBK,CAAa1B,GAA/BO,EAFsB,EAEtBA,KAAMa,EAFgB,EAEhBA,QAEd,OACI,6BACI,4BAAKpB,GACJoB,GAAW,uBAAGJ,UAAU,0CAAb,eACZ,yBAAKA,UAAU,aAGPT,EAAKE,KAAI,SAAAC,GAAG,OACR,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEOjBkB,EAtBM,WAAO,IAAD,EACa1C,mBAAS,CAAC,cADvB,mBAChB2C,EADgB,KACJ5C,EADI,KAEvB,OACI,6BACI,4CAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAWA,U,MCXvC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.49267477.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst AddCategory = ({setCategories}) => {\n    const [inputValue, setinputValue] = useState('');\n    const handleInputChange = (e) => setinputValue(e.target.value);\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if ( inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6lyItZUVMg9FTUhkf1Ro4xK3Rzd0HEe7`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__backInRight\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","// import React, { useState, useEffect } from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const { data, loading } = useFetchGifs(category);\n\n    return (\n        <div>\n            <h3>{category}</h3>\n            {loading && <p className=\"animate__animated animate__backInRight\">Loading ...</p>}\n            <div className=\"card-grid\">\n\n                {\n                    data.map(img =>\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    )\n                }\n            </div>\n        </div>\n\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(img => {\n\n            setTimeout(() => {\n                setstate({\n\n                    data: img,\n                    loading: false\n                })\n            }, 1000)\n        });\n    }, [category]);\n\n    return state;\n}\n","import React, {useState} from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            \n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category= {category}\n                        />\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n \n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// rafc\n// rafcp\n// rafce"],"sourceRoot":""}